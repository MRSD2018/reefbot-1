/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/sensor_msgs/msg/MatND.msg */
#ifndef SENSOR_MSGS_MESSAGE_MATND_H
#define SENSOR_MSGS_MESSAGE_MATND_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace sensor_msgs
{
template <class ContainerAllocator>
struct MatND_ {
  typedef MatND_<ContainerAllocator> Type;

  MatND_()
  : header()
  , sizes()
  , encoding()
  , is_bigendian(false)
  , data()
  {
  }

  MatND_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , sizes(_alloc)
  , encoding(_alloc)
  , is_bigendian(false)
  , data(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _sizes_type;
  std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  sizes;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _encoding_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  encoding;

  typedef uint8_t _is_bigendian_type;
  uint8_t is_bigendian;

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  data;


  typedef boost::shared_ptr< ::sensor_msgs::MatND_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_msgs::MatND_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MatND
typedef  ::sensor_msgs::MatND_<std::allocator<void> > MatND;

typedef boost::shared_ptr< ::sensor_msgs::MatND> MatNDPtr;
typedef boost::shared_ptr< ::sensor_msgs::MatND const> MatNDConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::sensor_msgs::MatND_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::sensor_msgs::MatND_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace sensor_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::sensor_msgs::MatND_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::sensor_msgs::MatND_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::sensor_msgs::MatND_<ContainerAllocator> > {
  static const char* value() 
  {
    return "9608ff2aa3388630c94c58f0be9f89de";
  }

  static const char* value(const  ::sensor_msgs::MatND_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x9608ff2aa3388630ULL;
  static const uint64_t static_value2 = 0xc94c58f0be9f89deULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_msgs::MatND_<ContainerAllocator> > {
  static const char* value() 
  {
    return "sensor_msgs/MatND";
  }

  static const char* value(const  ::sensor_msgs::MatND_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::sensor_msgs::MatND_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# A message that contains an uncompressed n dimensional\n\
# matrix. Designed to be compatible with the opencv n-dimensional\n\
# matrix.\n\
Header header\n\
\n\
int32[] sizes # The size of each dimension in the matrix\n\
\n\
string encoding # The data type see src/image_encodings.cpp\n\
\n\
bool is_bigendian # Is the data bigendian?\n\
\n\
uint8[] data # The actual data\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::sensor_msgs::MatND_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::sensor_msgs::MatND_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::sensor_msgs::MatND_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::sensor_msgs::MatND_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.sizes);
    stream.next(m.encoding);
    stream.next(m.is_bigendian);
    stream.next(m.data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MatND_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_msgs::MatND_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::sensor_msgs::MatND_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sizes[]" << std::endl;
    for (size_t i = 0; i < v.sizes.size(); ++i)
    {
      s << indent << "  sizes[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.sizes[i]);
    }
    s << indent << "encoding: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.encoding);
    s << indent << "is_bigendian: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_bigendian);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // SENSOR_MSGS_MESSAGE_MATND_H

