/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/reefbot_msgs/msg/RobotStatus.msg */
#ifndef REEFBOT_MSGS_MESSAGE_ROBOTSTATUS_H
#define REEFBOT_MSGS_MESSAGE_ROBOTSTATUS_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"

namespace reefbot_msgs
{
template <class ContainerAllocator>
struct RobotStatus_ {
  typedef RobotStatus_<ContainerAllocator> Type;

  RobotStatus_()
  : header()
  , left_speed(0.0)
  , right_speed(0.0)
  , vertical_speed(0.0)
  , depth(0.0)
  , heading(0.0)
  , roll(0.0)
  , pitch(0.0)
  , internal_humidity(0.0)
  , water_temp(0.0)
  , spin_count(0.0)
  , internal_temp(0.0)
  , total_power(0.0)
  , voltage_drop(0.0)
  , tether_voltage(0.0)
  , bus_voltage(0.0)
  , bus_current(0.0)
  , comm_error_count(0.0)
  {
  }

  RobotStatus_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , left_speed(0.0)
  , right_speed(0.0)
  , vertical_speed(0.0)
  , depth(0.0)
  , heading(0.0)
  , roll(0.0)
  , pitch(0.0)
  , internal_humidity(0.0)
  , water_temp(0.0)
  , spin_count(0.0)
  , internal_temp(0.0)
  , total_power(0.0)
  , voltage_drop(0.0)
  , tether_voltage(0.0)
  , bus_voltage(0.0)
  , bus_current(0.0)
  , comm_error_count(0.0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef float _left_speed_type;
  float left_speed;

  typedef float _right_speed_type;
  float right_speed;

  typedef float _vertical_speed_type;
  float vertical_speed;

  typedef float _depth_type;
  float depth;

  typedef float _heading_type;
  float heading;

  typedef float _roll_type;
  float roll;

  typedef float _pitch_type;
  float pitch;

  typedef float _internal_humidity_type;
  float internal_humidity;

  typedef float _water_temp_type;
  float water_temp;

  typedef float _spin_count_type;
  float spin_count;

  typedef float _internal_temp_type;
  float internal_temp;

  typedef float _total_power_type;
  float total_power;

  typedef float _voltage_drop_type;
  float voltage_drop;

  typedef float _tether_voltage_type;
  float tether_voltage;

  typedef float _bus_voltage_type;
  float bus_voltage;

  typedef float _bus_current_type;
  float bus_current;

  typedef float _comm_error_count_type;
  float comm_error_count;


  typedef boost::shared_ptr< ::reefbot_msgs::RobotStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reefbot_msgs::RobotStatus_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RobotStatus
typedef  ::reefbot_msgs::RobotStatus_<std::allocator<void> > RobotStatus;

typedef boost::shared_ptr< ::reefbot_msgs::RobotStatus> RobotStatusPtr;
typedef boost::shared_ptr< ::reefbot_msgs::RobotStatus const> RobotStatusConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::reefbot_msgs::RobotStatus_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::reefbot_msgs::RobotStatus_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace reefbot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::RobotStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::RobotStatus_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reefbot_msgs::RobotStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cb292a55b3deef4985b50365294fba83";
  }

  static const char* value(const  ::reefbot_msgs::RobotStatus_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcb292a55b3deef49ULL;
  static const uint64_t static_value2 = 0x85b50365294fba83ULL;
};

template<class ContainerAllocator>
struct DataType< ::reefbot_msgs::RobotStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/RobotStatus";
  }

  static const char* value(const  ::reefbot_msgs::RobotStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reefbot_msgs::RobotStatus_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message specifies the physical status of the robot as known by\n\
# the RobotController. This will be used to display the status to the\n\
# user.\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: July 2010\n\
\n\
Header header\n\
\n\
# Speeds of all the thursters. Positive is forward or up\n\
# TODO(mdesnoyer, furlong) define the units (RPM maybe?)\n\
float32 left_speed\n\
float32 right_speed\n\
float32 vertical_speed\n\
\n\
# Depth of the robot in meters according to the depth sensor\n\
float32 depth\n\
\n\
# Compass heading in degrees where 0 is N, 90 is E, 180 is S and 270 is W\n\
float32 heading\n\
float32 roll\n\
float32 pitch\n\
\n\
float32 internal_humidity\n\
float32 water_temp\n\
\n\
float32 spin_count\n\
\n\
float32 internal_temp\n\
float32 total_power\n\
float32 voltage_drop\n\
float32 tether_voltage\n\
float32 bus_voltage\n\
float32 bus_current\n\
float32 comm_error_count\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::reefbot_msgs::RobotStatus_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::reefbot_msgs::RobotStatus_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::reefbot_msgs::RobotStatus_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reefbot_msgs::RobotStatus_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.left_speed);
    stream.next(m.right_speed);
    stream.next(m.vertical_speed);
    stream.next(m.depth);
    stream.next(m.heading);
    stream.next(m.roll);
    stream.next(m.pitch);
    stream.next(m.internal_humidity);
    stream.next(m.water_temp);
    stream.next(m.spin_count);
    stream.next(m.internal_temp);
    stream.next(m.total_power);
    stream.next(m.voltage_drop);
    stream.next(m.tether_voltage);
    stream.next(m.bus_voltage);
    stream.next(m.bus_current);
    stream.next(m.comm_error_count);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RobotStatus_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reefbot_msgs::RobotStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::reefbot_msgs::RobotStatus_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "left_speed: ";
    Printer<float>::stream(s, indent + "  ", v.left_speed);
    s << indent << "right_speed: ";
    Printer<float>::stream(s, indent + "  ", v.right_speed);
    s << indent << "vertical_speed: ";
    Printer<float>::stream(s, indent + "  ", v.vertical_speed);
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
    s << indent << "heading: ";
    Printer<float>::stream(s, indent + "  ", v.heading);
    s << indent << "roll: ";
    Printer<float>::stream(s, indent + "  ", v.roll);
    s << indent << "pitch: ";
    Printer<float>::stream(s, indent + "  ", v.pitch);
    s << indent << "internal_humidity: ";
    Printer<float>::stream(s, indent + "  ", v.internal_humidity);
    s << indent << "water_temp: ";
    Printer<float>::stream(s, indent + "  ", v.water_temp);
    s << indent << "spin_count: ";
    Printer<float>::stream(s, indent + "  ", v.spin_count);
    s << indent << "internal_temp: ";
    Printer<float>::stream(s, indent + "  ", v.internal_temp);
    s << indent << "total_power: ";
    Printer<float>::stream(s, indent + "  ", v.total_power);
    s << indent << "voltage_drop: ";
    Printer<float>::stream(s, indent + "  ", v.voltage_drop);
    s << indent << "tether_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.tether_voltage);
    s << indent << "bus_voltage: ";
    Printer<float>::stream(s, indent + "  ", v.bus_voltage);
    s << indent << "bus_current: ";
    Printer<float>::stream(s, indent + "  ", v.bus_current);
    s << indent << "comm_error_count: ";
    Printer<float>::stream(s, indent + "  ", v.comm_error_count);
  }
};


} // namespace message_operations
} // namespace ros

#endif // REEFBOT_MSGS_MESSAGE_ROBOTSTATUS_H

