/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/reefbot_msgs/msg/SpeciesIDResponse.msg */
#ifndef REEFBOT_MSGS_MESSAGE_SPECIESIDRESPONSE_H
#define REEFBOT_MSGS_MESSAGE_SPECIESIDRESPONSE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "reefbot_msgs/SingleSpeciesId.h"

namespace reefbot_msgs
{
template <class ContainerAllocator>
struct SpeciesIDResponse_ {
  typedef SpeciesIDResponse_<ContainerAllocator> Type;

  SpeciesIDResponse_()
  : header()
  , image_id(0)
  , answers()
  {
  }

  SpeciesIDResponse_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , image_id(0)
  , answers(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef uint64_t _image_id_type;
  uint64_t image_id;

  typedef std::vector< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> >::other >  _answers_type;
  std::vector< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> >::other >  answers;


  typedef boost::shared_ptr< ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SpeciesIDResponse
typedef  ::reefbot_msgs::SpeciesIDResponse_<std::allocator<void> > SpeciesIDResponse;

typedef boost::shared_ptr< ::reefbot_msgs::SpeciesIDResponse> SpeciesIDResponsePtr;
typedef boost::shared_ptr< ::reefbot_msgs::SpeciesIDResponse const> SpeciesIDResponseConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace reefbot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6a90c0010a887f2021d1e9fe27d4c819";
  }

  static const char* value(const  ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6a90c0010a887f20ULL;
  static const uint64_t static_value2 = 0x21d1e9fe27d4c819ULL;
};

template<class ContainerAllocator>
struct DataType< ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/SpeciesIDResponse";
  }

  static const char* value(const  ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Response to a SpeciesIDRequest that tells the user the best guess of\n\
# what species were found.\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: June 2010\n\
\n\
Header header\n\
\n\
# Optional Id to identify the image\n\
uint64 image_id\n\
\n\
# Answers, one for each region in the Request and in the same order.\n\
SingleSpeciesId[] answers\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: reefbot_msgs/SingleSpeciesId\n\
# The best few matches for the species in a single region\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: June 2010\n\
\n\
# The bounding box where we found the individual\n\
sensor_msgs/RegionOfInterest bounding_box\n\
\n\
# The most likely species in descending order. This array could be\n\
# empty if there was no good match.\n\
SpeciesScore[] best_species\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
================================================================================\n\
MSG: reefbot_msgs/SpeciesScore\n\
# The score of a species identification. The score is dependent on the\n\
# algorithm being used so it doesn't necessarily have semantic meaning\n\
# except that a higher score is better.\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: June 2010\n\
\n\
# Unique identifier for the species\n\
uint32 species_id\n\
\n\
# Score for the species. Higher is better\n\
float32 score\n\
\n\
# Optional extra information about the score. This will be algorithm\n\
# dependent and might be useful for debugging\n\
string meta_data\n\
\n\
";
  }

  static const char* value(const  ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.image_id);
    stream.next(m.answers);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SpeciesIDResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "image_id: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.image_id);
    s << indent << "answers[]" << std::endl;
    for (size_t i = 0; i < v.answers.size(); ++i)
    {
      s << indent << "  answers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> >::stream(s, indent + "    ", v.answers[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // REEFBOT_MSGS_MESSAGE_SPECIESIDRESPONSE_H

