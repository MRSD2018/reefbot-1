/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/reefbot_msgs/msg/RobotHealth.msg */
ifndef REEFBOT_MSGS_MESSAGE_ROBOTHEALTH_H
define REEFBOT_MSGS_MESSAGE_ROBOTHEALTH_H
include <string>
include <vector>
include <map>
include <ostream>
include "ros/serialization.h"
include "ros/builtin_message_traits.h"
include "ros/message_operations.h"
include "ros/time.h"

include "ros/macros.h"

include "ros/assert.h"


namespace reefbot_msgs
{
template <class ContainerAllocator>
struct RobotHealth_ {
  typedef RobotHealth_<ContainerAllocator> Type;

  RobotHealth_()
  : voltage(0.0)
  , router_comms_ok(false)
  , robot_comms_ok(false)
  , left_motor_ok(false)
  , right_motor_ok(false)
  , vertical_motor_ok(false)
  , depth_sensor_ok(false)
  , heading_sensor_ok(false)
  , robot_error_code(0)
  {
  }

  RobotHealth_(const ContainerAllocator& _alloc)
  : voltage(0.0)
  , router_comms_ok(false)
  , robot_comms_ok(false)
  , left_motor_ok(false)
  , right_motor_ok(false)
  , vertical_motor_ok(false)
  , depth_sensor_ok(false)
  , heading_sensor_ok(false)
  , robot_error_code(0)
  {
  }

  typedef float _voltage_type;
  float voltage;

  typedef uint8_t _router_comms_ok_type;
  uint8_t router_comms_ok;

  typedef uint8_t _robot_comms_ok_type;
  uint8_t robot_comms_ok;

  typedef uint8_t _left_motor_ok_type;
  uint8_t left_motor_ok;

  typedef uint8_t _right_motor_ok_type;
  uint8_t right_motor_ok;

  typedef uint8_t _vertical_motor_ok_type;
  uint8_t vertical_motor_ok;

  typedef uint8_t _depth_sensor_ok_type;
  uint8_t depth_sensor_ok;

  typedef uint8_t _heading_sensor_ok_type;
  uint8_t heading_sensor_ok;

  typedef int32_t _robot_error_code_type;
  int32_t robot_error_code;


  typedef boost::shared_ptr< ::reefbot_msgs::RobotHealth_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reefbot_msgs::RobotHealth_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct RobotHealth
typedef  ::reefbot_msgs::RobotHealth_<std::allocator<void> > RobotHealth;

typedef boost::shared_ptr< ::reefbot_msgs::RobotHealth> RobotHealthPtr;
typedef boost::shared_ptr< ::reefbot_msgs::RobotHealth const> RobotHealthConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::reefbot_msgs::RobotHealth_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::reefbot_msgs::RobotHealth_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace reefbot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::RobotHealth_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::RobotHealth_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reefbot_msgs::RobotHealth_<ContainerAllocator> > {
  static const char* value() 
  {
    return "b1b87a859cb91e9334be183880bf9ecd";
  }

  static const char* value(const  ::reefbot_msgs::RobotHealth_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xb1b87a859cb91e93ULL;
  static const uint64_t static_value2 = 0x34be183880bf9ecdULL;
};

template<class ContainerAllocator>
struct DataType< ::reefbot_msgs::RobotHealth_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/RobotHealth";
  }

  static const char* value(const  ::reefbot_msgs::RobotHealth_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reefbot_msgs::RobotHealth_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Message that specifies the robot's health as known by the Robot Controller\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: July 2010\n\
\n\
# Voltage going to the robot in Volts. Note, as of initial deployment,\n\
# this will probably be either 48V or 0V because we don't actually\n\
# have a volt meter.\n\
float32 voltage\n\
\n\
# Do we have a comms link to the router\n\
bool router_comms_ok\n\
\n\
# Do we have a comms link to the robot\n\
bool robot_comms_ok\n\
\n\
# Are the various motors operational\n\
bool left_motor_ok\n\
bool right_motor_ok\n\
bool vertical_motor_ok\n\
\n\
# Are we getting valid readings from the depth sensor\n\
bool depth_sensor_ok\n\
\n\
# Are we getting valid readings from the heading sensor\n\
bool heading_sensor_ok\n\
\n\
# Error code reported by the robot\n\
int32 robot_error_code\n\
\n\
";
  }

  static const char* value(const  ::reefbot_msgs::RobotHealth_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::reefbot_msgs::RobotHealth_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reefbot_msgs::RobotHealth_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.voltage);
    stream.next(m.router_comms_ok);
    stream.next(m.robot_comms_ok);
    stream.next(m.left_motor_ok);
    stream.next(m.right_motor_ok);
    stream.next(m.vertical_motor_ok);
    stream.next(m.depth_sensor_ok);
    stream.next(m.heading_sensor_ok);
    stream.next(m.robot_error_code);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct RobotHealth_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reefbot_msgs::RobotHealth_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::reefbot_msgs::RobotHealth_<ContainerAllocator> & v) 
  {
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "router_comms_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.router_comms_ok);
    s << indent << "robot_comms_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.robot_comms_ok);
    s << indent << "left_motor_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_motor_ok);
    s << indent << "right_motor_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_motor_ok);
    s << indent << "vertical_motor_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.vertical_motor_ok);
    s << indent << "depth_sensor_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.depth_sensor_ok);
    s << indent << "heading_sensor_ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.heading_sensor_ok);
    s << indent << "robot_error_code: ";
    Printer<int32_t>::stream(s, indent + "  ", v.robot_error_code);
  }
};


} // namespace message_operations
} // namespace ros

#endif // REEFBOT_MSGS_MESSAGE_ROBOTHEALTH_H

