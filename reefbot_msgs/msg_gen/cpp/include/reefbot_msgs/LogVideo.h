/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/reefbot_msgs/msg/LogVideo.msg */
#ifndef REEFBOT_MSGS_MESSAGE_LOGVIDEO_H
#define REEFBOT_MSGS_MESSAGE_LOGVIDEO_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/String.h"
#include "std_msgs/String.h"

namespace reefbot_msgs
{
template <class ContainerAllocator>
struct LogVideo_ {
  typedef LogVideo_<ContainerAllocator> Type;

  LogVideo_()
  : rtp_ip()
  , rtp_port()
  , duration(0.0)
  {
  }

  LogVideo_(const ContainerAllocator& _alloc)
  : rtp_ip(_alloc)
  , rtp_port(_alloc)
  , duration(0.0)
  {
  }

  typedef  ::std_msgs::String_<ContainerAllocator>  _rtp_ip_type;
   ::std_msgs::String_<ContainerAllocator>  rtp_ip;

  typedef  ::std_msgs::String_<ContainerAllocator>  _rtp_port_type;
   ::std_msgs::String_<ContainerAllocator>  rtp_port;

  typedef double _duration_type;
  double duration;


  typedef boost::shared_ptr< ::reefbot_msgs::LogVideo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reefbot_msgs::LogVideo_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct LogVideo
typedef  ::reefbot_msgs::LogVideo_<std::allocator<void> > LogVideo;

typedef boost::shared_ptr< ::reefbot_msgs::LogVideo> LogVideoPtr;
typedef boost::shared_ptr< ::reefbot_msgs::LogVideo const> LogVideoConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::reefbot_msgs::LogVideo_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::reefbot_msgs::LogVideo_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace reefbot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::LogVideo_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::LogVideo_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reefbot_msgs::LogVideo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "138afce7a4d9872b7ca317a623a839c4";
  }

  static const char* value(const  ::reefbot_msgs::LogVideo_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x138afce7a4d9872bULL;
  static const uint64_t static_value2 = 0x7ca317a623a839c4ULL;
};

template<class ContainerAllocator>
struct DataType< ::reefbot_msgs::LogVideo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/LogVideo";
  }

  static const char* value(const  ::reefbot_msgs::LogVideo_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reefbot_msgs::LogVideo_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# A message that says to start logging some video\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: Oct 2010\n\
\n\
# The ip of the broadcast stream\n\
std_msgs/String rtp_ip\n\
\n\
# The port of the broadcast stream\n\
std_msgs/String rtp_port\n\
\n\
# How long to log the video in seconds. 0 means go until we die.\n\
float64 duration\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
";
  }

  static const char* value(const  ::reefbot_msgs::LogVideo_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reefbot_msgs::LogVideo_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.rtp_ip);
    stream.next(m.rtp_port);
    stream.next(m.duration);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct LogVideo_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reefbot_msgs::LogVideo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::reefbot_msgs::LogVideo_<ContainerAllocator> & v) 
  {
    s << indent << "rtp_ip: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.rtp_ip);
    s << indent << "rtp_port: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.rtp_port);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
  }
};


} // namespace message_operations
} // namespace ros

#endif // REEFBOT_MSGS_MESSAGE_LOGVIDEO_H

