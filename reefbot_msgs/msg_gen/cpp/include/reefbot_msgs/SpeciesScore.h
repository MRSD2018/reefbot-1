/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/reefbot_msgs/msg/SpeciesScore.msg */
#ifndef REEFBOT_MSGS_MESSAGE_SPECIESSCORE_H
#define REEFBOT_MSGS_MESSAGE_SPECIESSCORE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace reefbot_msgs
{
template <class ContainerAllocator>
struct SpeciesScore_ {
  typedef SpeciesScore_<ContainerAllocator> Type;

  SpeciesScore_()
  : species_id(0)
  , score(0.0)
  , meta_data()
  {
  }

  SpeciesScore_(const ContainerAllocator& _alloc)
  : species_id(0)
  , score(0.0)
  , meta_data(_alloc)
  {
  }

  typedef uint32_t _species_id_type;
  uint32_t species_id;

  typedef float _score_type;
  float score;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _meta_data_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  meta_data;


  typedef boost::shared_ptr< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reefbot_msgs::SpeciesScore_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SpeciesScore
typedef  ::reefbot_msgs::SpeciesScore_<std::allocator<void> > SpeciesScore;

typedef boost::shared_ptr< ::reefbot_msgs::SpeciesScore> SpeciesScorePtr;
typedef boost::shared_ptr< ::reefbot_msgs::SpeciesScore const> SpeciesScoreConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::reefbot_msgs::SpeciesScore_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace reefbot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::SpeciesScore_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> > {
  static const char* value() 
  {
    return "eefcde7545624590280bada3afd96471";
  }

  static const char* value(const  ::reefbot_msgs::SpeciesScore_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xeefcde7545624590ULL;
  static const uint64_t static_value2 = 0x280bada3afd96471ULL;
};

template<class ContainerAllocator>
struct DataType< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/SpeciesScore";
  }

  static const char* value(const  ::reefbot_msgs::SpeciesScore_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# The score of a species identification. The score is dependent on the\n\
# algorithm being used so it doesn't necessarily have semantic meaning\n\
# except that a higher score is better.\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: June 2010\n\
\n\
# Unique identifier for the species\n\
uint32 species_id\n\
\n\
# Score for the species. Higher is better\n\
float32 score\n\
\n\
# Optional extra information about the score. This will be algorithm\n\
# dependent and might be useful for debugging\n\
string meta_data\n\
\n\
";
  }

  static const char* value(const  ::reefbot_msgs::SpeciesScore_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.species_id);
    stream.next(m.score);
    stream.next(m.meta_data);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SpeciesScore_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::reefbot_msgs::SpeciesScore_<ContainerAllocator> & v) 
  {
    s << indent << "species_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.species_id);
    s << indent << "score: ";
    Printer<float>::stream(s, indent + "  ", v.score);
    s << indent << "meta_data: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.meta_data);
  }
};


} // namespace message_operations
} // namespace ros

#endif // REEFBOT_MSGS_MESSAGE_SPECIESSCORE_H

