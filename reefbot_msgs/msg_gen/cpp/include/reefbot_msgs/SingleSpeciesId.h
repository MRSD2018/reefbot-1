/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/reefbot_msgs/msg/SingleSpeciesId.msg */
#ifndef REEFBOT_MSGS_MESSAGE_SINGLESPECIESID_H
#define REEFBOT_MSGS_MESSAGE_SINGLESPECIESID_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "sensor_msgs/RegionOfInterest.h"
#include "reefbot_msgs/SpeciesScore.h"

namespace reefbot_msgs
{
template <class ContainerAllocator>
struct SingleSpeciesId_ {
  typedef SingleSpeciesId_<ContainerAllocator> Type;

  SingleSpeciesId_()
  : bounding_box()
  , best_species()
  {
  }

  SingleSpeciesId_(const ContainerAllocator& _alloc)
  : bounding_box(_alloc)
  , best_species(_alloc)
  {
  }

  typedef  ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  _bounding_box_type;
   ::sensor_msgs::RegionOfInterest_<ContainerAllocator>  bounding_box;

  typedef std::vector< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> >::other >  _best_species_type;
  std::vector< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> >::other >  best_species;


  typedef boost::shared_ptr< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SingleSpeciesId
typedef  ::reefbot_msgs::SingleSpeciesId_<std::allocator<void> > SingleSpeciesId;

typedef boost::shared_ptr< ::reefbot_msgs::SingleSpeciesId> SingleSpeciesIdPtr;
typedef boost::shared_ptr< ::reefbot_msgs::SingleSpeciesId const> SingleSpeciesIdConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace reefbot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2e152236e2ac275b6db79639b7684e8e";
  }

  static const char* value(const  ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2e152236e2ac275bULL;
  static const uint64_t static_value2 = 0x6db79639b7684e8eULL;
};

template<class ContainerAllocator>
struct DataType< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/SingleSpeciesId";
  }

  static const char* value(const  ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# The best few matches for the species in a single region\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: June 2010\n\
\n\
# The bounding box where we found the individual\n\
sensor_msgs/RegionOfInterest bounding_box\n\
\n\
# The most likely species in descending order. This array could be\n\
# empty if there was no good match.\n\
SpeciesScore[] best_species\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
================================================================================\n\
MSG: reefbot_msgs/SpeciesScore\n\
# The score of a species identification. The score is dependent on the\n\
# algorithm being used so it doesn't necessarily have semantic meaning\n\
# except that a higher score is better.\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: June 2010\n\
\n\
# Unique identifier for the species\n\
uint32 species_id\n\
\n\
# Score for the species. Higher is better\n\
float32 score\n\
\n\
# Optional extra information about the score. This will be algorithm\n\
# dependent and might be useful for debugging\n\
string meta_data\n\
\n\
";
  }

  static const char* value(const  ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.bounding_box);
    stream.next(m.best_species);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SingleSpeciesId_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::reefbot_msgs::SingleSpeciesId_<ContainerAllocator> & v) 
  {
    s << indent << "bounding_box: ";
s << std::endl;
    Printer< ::sensor_msgs::RegionOfInterest_<ContainerAllocator> >::stream(s, indent + "  ", v.bounding_box);
    s << indent << "best_species[]" << std::endl;
    for (size_t i = 0; i < v.best_species.size(); ++i)
    {
      s << indent << "  best_species[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::reefbot_msgs::SpeciesScore_<ContainerAllocator> >::stream(s, indent + "    ", v.best_species[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // REEFBOT_MSGS_MESSAGE_SINGLESPECIESID_H

