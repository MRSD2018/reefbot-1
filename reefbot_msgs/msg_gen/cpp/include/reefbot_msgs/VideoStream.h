/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/reefbot_msgs/msg/VideoStream.msg */
#ifndef REEFBOT_MSGS_MESSAGE_VIDEOSTREAM_H
#define REEFBOT_MSGS_MESSAGE_VIDEOSTREAM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/String.h"

namespace reefbot_msgs
{
template <class ContainerAllocator>
struct VideoStream_ {
  typedef VideoStream_<ContainerAllocator> Type;

  VideoStream_()
  : url()
  {
  }

  VideoStream_(const ContainerAllocator& _alloc)
  : url(_alloc)
  {
  }

  typedef  ::std_msgs::String_<ContainerAllocator>  _url_type;
   ::std_msgs::String_<ContainerAllocator>  url;


  typedef boost::shared_ptr< ::reefbot_msgs::VideoStream_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reefbot_msgs::VideoStream_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VideoStream
typedef  ::reefbot_msgs::VideoStream_<std::allocator<void> > VideoStream;

typedef boost::shared_ptr< ::reefbot_msgs::VideoStream> VideoStreamPtr;
typedef boost::shared_ptr< ::reefbot_msgs::VideoStream const> VideoStreamConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::reefbot_msgs::VideoStream_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::reefbot_msgs::VideoStream_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace reefbot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::VideoStream_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::VideoStream_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reefbot_msgs::VideoStream_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cd586f51ec0610ad4479871c38166fc8";
  }

  static const char* value(const  ::reefbot_msgs::VideoStream_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xcd586f51ec0610adULL;
  static const uint64_t static_value2 = 0x4479871c38166fc8ULL;
};

template<class ContainerAllocator>
struct DataType< ::reefbot_msgs::VideoStream_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/VideoStream";
  }

  static const char* value(const  ::reefbot_msgs::VideoStream_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reefbot_msgs::VideoStream_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message specifies the url that the video stream is being\n\
# broadcast at. This allows us to change the video settings on the fly\n\
# by sending this message.\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: July 2010\n\
\n\
std_msgs/String url\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
\n\
";
  }

  static const char* value(const  ::reefbot_msgs::VideoStream_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reefbot_msgs::VideoStream_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.url);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VideoStream_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reefbot_msgs::VideoStream_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::reefbot_msgs::VideoStream_<ContainerAllocator> & v) 
  {
    s << indent << "url: ";
s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.url);
  }
};


} // namespace message_operations
} // namespace ros

#endif // REEFBOT_MSGS_MESSAGE_VIDEOSTREAM_H

