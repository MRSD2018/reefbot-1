/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/reefbot_msgs/msg/AddSpeciesLabel.msg */
#ifndef REEFBOT_MSGS_MESSAGE_ADDSPECIESLABEL_H
#define REEFBOT_MSGS_MESSAGE_ADDSPECIESLABEL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "sensor_msgs/Image.h"
#include "reefbot_msgs/ImageRegion.h"

namespace reefbot_msgs
{
template <class ContainerAllocator>
struct AddSpeciesLabel_ {
  typedef AddSpeciesLabel_<ContainerAllocator> Type;

  AddSpeciesLabel_()
  : image()
  , regions()
  , labels()
  , filename()
  , blob_ids()
  {
  }

  AddSpeciesLabel_(const ContainerAllocator& _alloc)
  : image(_alloc)
  , regions(_alloc)
  , labels(_alloc)
  , filename(_alloc)
  , blob_ids(_alloc)
  {
  }

  typedef  ::sensor_msgs::Image_<ContainerAllocator>  _image_type;
   ::sensor_msgs::Image_<ContainerAllocator>  image;

  typedef std::vector< ::reefbot_msgs::ImageRegion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::reefbot_msgs::ImageRegion_<ContainerAllocator> >::other >  _regions_type;
  std::vector< ::reefbot_msgs::ImageRegion_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::reefbot_msgs::ImageRegion_<ContainerAllocator> >::other >  regions;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _labels_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  labels;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  filename;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _blob_ids_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  blob_ids;


  typedef boost::shared_ptr< ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct AddSpeciesLabel
typedef  ::reefbot_msgs::AddSpeciesLabel_<std::allocator<void> > AddSpeciesLabel;

typedef boost::shared_ptr< ::reefbot_msgs::AddSpeciesLabel> AddSpeciesLabelPtr;
typedef boost::shared_ptr< ::reefbot_msgs::AddSpeciesLabel const> AddSpeciesLabelConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace reefbot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "aea72d3d4b9c673c27c854a8fb2f9240";
  }

  static const char* value(const  ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xaea72d3d4b9c673cULL;
  static const uint64_t static_value2 = 0x27c854a8fb2f9240ULL;
};

template<class ContainerAllocator>
struct DataType< ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/AddSpeciesLabel";
  }

  static const char* value(const  ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# This message specifies a new image and a label to add to the species id\n\
# dictionary\n\
#\n\
# If you're using OpenCV to handle images, look up the cv_bridge in \n\
# ROS to easily write this message.\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: Nov 2010\n\
\n\
# Full color image that contains an instance of the species\n\
sensor_msgs/Image image\n\
\n\
# Regions in the image to look for individuals that we have labels for\n\
ImageRegion[] regions\n\
\n\
# Array of labels, one for each region that specify the species in that region\n\
uint32[] labels\n\
\n\
# Optional filename of the image\n\
string filename\n\
\n\
# Optional array of blob ids, one for each region specified\n\
uint32[] blob_ids\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: reefbot_msgs/ImageRegion\n\
# Message that species a region in the image to look at to identify\n\
# the species.\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: June 2010\n\
\n\
# Bounding box in the image that specifies the region\n\
sensor_msgs/RegionOfInterest bounding_box\n\
\n\
# Binary mask image specifying where the species is in the bounding\n\
# box. A pixel value of zero means to ignore the pixel. If this image\n\
# is empty, then the entire box should be used, but if it's not empty,\n\
# it must be the same size as bbox or else an error will be generated.\n\
sensor_msgs/Image mask\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
";
  }

  static const char* value(const  ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.image);
    stream.next(m.regions);
    stream.next(m.labels);
    stream.next(m.filename);
    stream.next(m.blob_ids);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct AddSpeciesLabel_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::reefbot_msgs::AddSpeciesLabel_<ContainerAllocator> & v) 
  {
    s << indent << "image: ";
s << std::endl;
    Printer< ::sensor_msgs::Image_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "regions[]" << std::endl;
    for (size_t i = 0; i < v.regions.size(); ++i)
    {
      s << indent << "  regions[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::reefbot_msgs::ImageRegion_<ContainerAllocator> >::stream(s, indent + "    ", v.regions[i]);
    }
    s << indent << "labels[]" << std::endl;
    for (size_t i = 0; i < v.labels.size(); ++i)
    {
      s << indent << "  labels[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.labels[i]);
    }
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filename);
    s << indent << "blob_ids[]" << std::endl;
    for (size_t i = 0; i < v.blob_ids.size(); ++i)
    {
      s << indent << "  blob_ids[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.blob_ids[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // REEFBOT_MSGS_MESSAGE_ADDSPECIESLABEL_H

