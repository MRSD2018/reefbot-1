"""autogenerated by genpy from reefbot_msgs/LogVideo.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class LogVideo(genpy.Message):
  _md5sum = "138afce7a4d9872b7ca317a623a839c4"
  _type = "reefbot_msgs/LogVideo"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# A message that says to start logging some video
#
# Author: Mark Desnoyer (markd@cmu.edu)
# Date: Oct 2010

# The ip of the broadcast stream
std_msgs/String rtp_ip

# The port of the broadcast stream
std_msgs/String rtp_port

# How long to log the video in seconds. 0 means go until we die.
float64 duration
================================================================================
MSG: std_msgs/String
string data

"""
  __slots__ = ['rtp_ip','rtp_port','duration']
  _slot_types = ['std_msgs/String','std_msgs/String','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       rtp_ip,rtp_port,duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LogVideo, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.rtp_ip is None:
        self.rtp_ip = std_msgs.msg.String()
      if self.rtp_port is None:
        self.rtp_port = std_msgs.msg.String()
      if self.duration is None:
        self.duration = 0.
    else:
      self.rtp_ip = std_msgs.msg.String()
      self.rtp_port = std_msgs.msg.String()
      self.duration = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.rtp_ip.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rtp_port.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.duration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.rtp_ip is None:
        self.rtp_ip = std_msgs.msg.String()
      if self.rtp_port is None:
        self.rtp_port = std_msgs.msg.String()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rtp_ip.data = str[start:end].decode('utf-8')
      else:
        self.rtp_ip.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rtp_port.data = str[start:end].decode('utf-8')
      else:
        self.rtp_port.data = str[start:end]
      start = end
      end += 8
      (self.duration,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.rtp_ip.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.rtp_port.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_d.pack(self.duration))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.rtp_ip is None:
        self.rtp_ip = std_msgs.msg.String()
      if self.rtp_port is None:
        self.rtp_port = std_msgs.msg.String()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rtp_ip.data = str[start:end].decode('utf-8')
      else:
        self.rtp_ip.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rtp_port.data = str[start:end].decode('utf-8')
      else:
        self.rtp_port.data = str[start:end]
      start = end
      end += 8
      (self.duration,) = _struct_d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_d = struct.Struct("<d")
