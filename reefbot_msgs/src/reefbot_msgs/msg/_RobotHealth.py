"""autogenerated by genpy from reefbot_msgs/RobotHealth.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotHealth(genpy.Message):
  _md5sum = "b1b87a859cb91e9334be183880bf9ecd"
  _type = "reefbot_msgs/RobotHealth"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Message that specifies the robot's health as known by the Robot Controller
#
# Author: Mark Desnoyer (markd@cmu.edu)
# Date: July 2010
# Voltage going to the robot in Volts. Note, as of initial deployment,
# this will probably be either 48V or 0V because we don't actually
# have a volt meter.
float32 voltage
# Do we have a comms link to the router
bool router_comms_ok
# Do we have a comms link to the robot
bool robot_comms_ok
# Are the various motors operational
bool left_motor_ok
bool right_motor_ok
bool vertical_motor_ok
# Are we getting valid readings from the depth sensor
bool depth_sensor_ok
# Are we getting valid readings from the heading sensor
bool heading_sensor_ok
# Error code reported by the robot
int32 robot_error_code
"""
  __slots__ = ['voltage','router_comms_ok','robot_comms_ok','left_motor_ok','right_motor_ok','vertical_motor_ok','depth_sensor_ok','heading_sensor_ok','robot_error_code']
  _slot_types = ['float32','bool','bool','bool','bool','bool','bool','bool','int32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    The available fields are:
       voltage,router_comms_ok,robot_comms_ok,left_motor_ok,right_motor_ok,vertical_motor_ok,depth_sensor_ok,heading_sensor_ok,robot_error_code
    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotHealth, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.voltage is None:
        self.voltage = 0.
      if self.router_comms_ok is None:
        self.router_comms_ok = False
      if self.robot_comms_ok is None:
        self.robot_comms_ok = False
      if self.left_motor_ok is None:
        self.left_motor_ok = False
      if self.right_motor_ok is None:
        self.right_motor_ok = False
      if self.vertical_motor_ok is None:
        self.vertical_motor_ok = False
      if self.depth_sensor_ok is None:
        self.depth_sensor_ok = False
      if self.heading_sensor_ok is None:
        self.heading_sensor_ok = False
      if self.robot_error_code is None:
        self.robot_error_code = 0
    else:
      self.voltage = 0.
      self.router_comms_ok = False
      self.robot_comms_ok = False
      self.left_motor_ok = False
      self.right_motor_ok = False
      self.vertical_motor_ok = False
      self.depth_sensor_ok = False
      self.heading_sensor_ok = False
      self.robot_error_code = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_f7Bi.pack(_x.voltage, _x.router_comms_ok, _x.robot_comms_ok, _x.left_motor_ok, _x.right_motor_ok, _x.vertical_motor_ok, _x.depth_sensor_ok, _x.heading_sensor_ok, _x.robot_error_code))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.voltage, _x.router_comms_ok, _x.robot_comms_ok, _x.left_motor_ok, _x.right_motor_ok, _x.vertical_motor_ok, _x.depth_sensor_ok, _x.heading_sensor_ok, _x.robot_error_code,) = _struct_f7Bi.unpack(str[start:end])
      self.router_comms_ok = bool(self.router_comms_ok)
      self.robot_comms_ok = bool(self.robot_comms_ok)
      self.left_motor_ok = bool(self.left_motor_ok)
      self.right_motor_ok = bool(self.right_motor_ok)
      self.vertical_motor_ok = bool(self.vertical_motor_ok)
      self.depth_sensor_ok = bool(self.depth_sensor_ok)
      self.heading_sensor_ok = bool(self.heading_sensor_ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_f7Bi.pack(_x.voltage, _x.router_comms_ok, _x.robot_comms_ok, _x.left_motor_ok, _x.right_motor_ok, _x.vertical_motor_ok, _x.depth_sensor_ok, _x.heading_sensor_ok, _x.robot_error_code))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 15
      (_x.voltage, _x.router_comms_ok, _x.robot_comms_ok, _x.left_motor_ok, _x.right_motor_ok, _x.vertical_motor_ok, _x.depth_sensor_ok, _x.heading_sensor_ok, _x.robot_error_code,) = _struct_f7Bi.unpack(str[start:end])
      self.router_comms_ok = bool(self.router_comms_ok)
      self.robot_comms_ok = bool(self.robot_comms_ok)
      self.left_motor_ok = bool(self.left_motor_ok)
      self.right_motor_ok = bool(self.right_motor_ok)
      self.vertical_motor_ok = bool(self.vertical_motor_ok)
      self.depth_sensor_ok = bool(self.depth_sensor_ok)
      self.heading_sensor_ok = bool(self.heading_sensor_ok)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_f7Bi = struct.Struct("<f7Bi")


















































