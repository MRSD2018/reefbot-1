"""autogenerated by genpy from reefbot_msgs/SingleSpeciesId.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import reefbot_msgs.msg
import sensor_msgs.msg

class SingleSpeciesId(genpy.Message):
  _md5sum = "2e152236e2ac275b6db79639b7684e8e"
  _type = "reefbot_msgs/SingleSpeciesId"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# The best few matches for the species in a single region
#
# Author: Mark Desnoyer (markd@cmu.edu)
# Date: June 2010

# The bounding box where we found the individual
sensor_msgs/RegionOfInterest bounding_box

# The most likely species in descending order. This array could be
# empty if there was no good match.
SpeciesScore[] best_species

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify

================================================================================
MSG: reefbot_msgs/SpeciesScore
# The score of a species identification. The score is dependent on the
# algorithm being used so it doesn't necessarily have semantic meaning
# except that a higher score is better.
#
# Author: Mark Desnoyer (markd@cmu.edu)
# Date: June 2010

# Unique identifier for the species
uint32 species_id

# Score for the species. Higher is better
float32 score

# Optional extra information about the score. This will be algorithm
# dependent and might be useful for debugging
string meta_data

"""
  __slots__ = ['bounding_box','best_species']
  _slot_types = ['sensor_msgs/RegionOfInterest','reefbot_msgs/SpeciesScore[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       bounding_box,best_species

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SingleSpeciesId, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.bounding_box is None:
        self.bounding_box = sensor_msgs.msg.RegionOfInterest()
      if self.best_species is None:
        self.best_species = []
    else:
      self.bounding_box = sensor_msgs.msg.RegionOfInterest()
      self.best_species = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_4IB.pack(_x.bounding_box.x_offset, _x.bounding_box.y_offset, _x.bounding_box.height, _x.bounding_box.width, _x.bounding_box.do_rectify))
      length = len(self.best_species)
      buff.write(_struct_I.pack(length))
      for val1 in self.best_species:
        _x = val1
        buff.write(_struct_If.pack(_x.species_id, _x.score))
        _x = val1.meta_data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.bounding_box is None:
        self.bounding_box = sensor_msgs.msg.RegionOfInterest()
      if self.best_species is None:
        self.best_species = None
      end = 0
      _x = self
      start = end
      end += 17
      (_x.bounding_box.x_offset, _x.bounding_box.y_offset, _x.bounding_box.height, _x.bounding_box.width, _x.bounding_box.do_rectify,) = _struct_4IB.unpack(str[start:end])
      self.bounding_box.do_rectify = bool(self.bounding_box.do_rectify)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.best_species = []
      for i in range(0, length):
        val1 = reefbot_msgs.msg.SpeciesScore()
        _x = val1
        start = end
        end += 8
        (_x.species_id, _x.score,) = _struct_If.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.meta_data = str[start:end].decode('utf-8')
        else:
          val1.meta_data = str[start:end]
        self.best_species.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_4IB.pack(_x.bounding_box.x_offset, _x.bounding_box.y_offset, _x.bounding_box.height, _x.bounding_box.width, _x.bounding_box.do_rectify))
      length = len(self.best_species)
      buff.write(_struct_I.pack(length))
      for val1 in self.best_species:
        _x = val1
        buff.write(_struct_If.pack(_x.species_id, _x.score))
        _x = val1.meta_data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.bounding_box is None:
        self.bounding_box = sensor_msgs.msg.RegionOfInterest()
      if self.best_species is None:
        self.best_species = None
      end = 0
      _x = self
      start = end
      end += 17
      (_x.bounding_box.x_offset, _x.bounding_box.y_offset, _x.bounding_box.height, _x.bounding_box.width, _x.bounding_box.do_rectify,) = _struct_4IB.unpack(str[start:end])
      self.bounding_box.do_rectify = bool(self.bounding_box.do_rectify)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.best_species = []
      for i in range(0, length):
        val1 = reefbot_msgs.msg.SpeciesScore()
        _x = val1
        start = end
        end += 8
        (_x.species_id, _x.score,) = _struct_If.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.meta_data = str[start:end].decode('utf-8')
        else:
          val1.meta_data = str[start:end]
        self.best_species.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_4IB = struct.Struct("<4IB")
_struct_If = struct.Struct("<If")
