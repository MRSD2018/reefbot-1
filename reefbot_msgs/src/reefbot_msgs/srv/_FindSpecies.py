"""autogenerated by genpy from reefbot_msgs/FindSpeciesRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import reefbot_msgs.msg
import std_msgs.msg

class FindSpeciesRequest(genpy.Message):
  _md5sum = "d75780091c908e247bf645a43c77f4ce"
  _type = "reefbot_msgs/FindSpeciesRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """ImageCaptured image

================================================================================
MSG: reefbot_msgs/ImageCaptured
# This message specifies that a still image was captured by the system.
#
# If you're using OpenCV to handle images, look up the cv_bridge in 
# ROS to easily write/read this message.
#
# Author: Mark Desnoyer (markd@cmu.edu)
# Date: Sept 2010

Header header

# Optional Id to identify the image
uint64 image_id

# Full color image that was captured
sensor_msgs/Image image

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in src/image_encodings.cpp

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

"""
  __slots__ = ['image']
  _slot_types = ['reefbot_msgs/ImageCaptured']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       image

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FindSpeciesRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.image is None:
        self.image = reefbot_msgs.msg.ImageCaptured()
    else:
      self.image = reefbot_msgs.msg.ImageCaptured()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Q3I.pack(_x.image.image_id, _x.image.image.header.seq, _x.image.image.header.stamp.secs, _x.image.image.header.stamp.nsecs))
      _x = self.image.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image.image.height, _x.image.image.width))
      _x = self.image.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image.image.is_bigendian, _x.image.image.step))
      _x = self.image.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.image is None:
        self.image = reefbot_msgs.msg.ImageCaptured()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.image.image_id, _x.image.image.header.seq, _x.image.image.header.stamp.secs, _x.image.image.header.stamp.nsecs,) = _struct_Q3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.image.height, _x.image.image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.image.encoding = str[start:end].decode('utf-8')
      else:
        self.image.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.image.is_bigendian, _x.image.image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.image.data = str[start:end].decode('utf-8')
      else:
        self.image.image.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_Q3I.pack(_x.image.image_id, _x.image.image.header.seq, _x.image.image.header.stamp.secs, _x.image.image.header.stamp.nsecs))
      _x = self.image.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2I.pack(_x.image.image.height, _x.image.image.width))
      _x = self.image.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_BI.pack(_x.image.image.is_bigendian, _x.image.image.step))
      _x = self.image.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.image is None:
        self.image = reefbot_msgs.msg.ImageCaptured()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 20
      (_x.image.image_id, _x.image.image.header.seq, _x.image.image.header.stamp.secs, _x.image.image.header.stamp.nsecs,) = _struct_Q3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.image.height, _x.image.image.width,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.image.encoding = str[start:end].decode('utf-8')
      else:
        self.image.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.image.is_bigendian, _x.image.image.step,) = _struct_BI.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.image.data = str[start:end].decode('utf-8')
      else:
        self.image.image.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_BI = struct.Struct("<BI")
_struct_Q3I = struct.Struct("<Q3I")
_struct_2I = struct.Struct("<2I")
"""autogenerated by genpy from reefbot_msgs/FindSpeciesResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import sensor_msgs.msg
import reefbot_msgs.msg
import std_msgs.msg

class FindSpeciesResponse(genpy.Message):
  _md5sum = "2660d795deb5b215e3a6337b079df1fa"
  _type = "reefbot_msgs/FindSpeciesResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """SpeciesIDResponse response

================================================================================
MSG: reefbot_msgs/SpeciesIDResponse
# Response to a SpeciesIDRequest that tells the user the best guess of
# what species were found.
#
# Author: Mark Desnoyer (markd@cmu.edu)
# Date: June 2010

Header header

# Optional Id to identify the image
uint64 image_id

# Answers, one for each region in the Request and in the same order.
SingleSpeciesId[] answers

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: reefbot_msgs/SingleSpeciesId
# The best few matches for the species in a single region
#
# Author: Mark Desnoyer (markd@cmu.edu)
# Date: June 2010

# The bounding box where we found the individual
sensor_msgs/RegionOfInterest bounding_box

# The most likely species in descending order. This array could be
# empty if there was no good match.
SpeciesScore[] best_species

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the "raw"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify

================================================================================
MSG: reefbot_msgs/SpeciesScore
# The score of a species identification. The score is dependent on the
# algorithm being used so it doesn't necessarily have semantic meaning
# except that a higher score is better.
#
# Author: Mark Desnoyer (markd@cmu.edu)
# Date: June 2010

# Unique identifier for the species
uint32 species_id

# Score for the species. Higher is better
float32 score

# Optional extra information about the score. This will be algorithm
# dependent and might be useful for debugging
string meta_data

"""
  __slots__ = ['response']
  _slot_types = ['reefbot_msgs/SpeciesIDResponse']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       response

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FindSpeciesResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.response is None:
        self.response = reefbot_msgs.msg.SpeciesIDResponse()
    else:
      self.response = reefbot_msgs.msg.SpeciesIDResponse()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.response.header.seq, _x.response.header.stamp.secs, _x.response.header.stamp.nsecs))
      _x = self.response.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_Q.pack(self.response.image_id))
      length = len(self.response.answers)
      buff.write(_struct_I.pack(length))
      for val1 in self.response.answers:
        _v1 = val1.bounding_box
        _x = _v1
        buff.write(_struct_4IB.pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
        length = len(val1.best_species)
        buff.write(_struct_I.pack(length))
        for val2 in val1.best_species:
          _x = val2
          buff.write(_struct_If.pack(_x.species_id, _x.score))
          _x = val2.meta_data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.response is None:
        self.response = reefbot_msgs.msg.SpeciesIDResponse()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.response.header.seq, _x.response.header.stamp.secs, _x.response.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.response.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.response.image_id,) = _struct_Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.response.answers = []
      for i in range(0, length):
        val1 = reefbot_msgs.msg.SingleSpeciesId()
        _v2 = val1.bounding_box
        _x = _v2
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _struct_4IB.unpack(str[start:end])
        _v2.do_rectify = bool(_v2.do_rectify)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.best_species = []
        for i in range(0, length):
          val2 = reefbot_msgs.msg.SpeciesScore()
          _x = val2
          start = end
          end += 8
          (_x.species_id, _x.score,) = _struct_If.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.meta_data = str[start:end].decode('utf-8')
          else:
            val2.meta_data = str[start:end]
          val1.best_species.append(val2)
        self.response.answers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.response.header.seq, _x.response.header.stamp.secs, _x.response.header.stamp.nsecs))
      _x = self.response.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_Q.pack(self.response.image_id))
      length = len(self.response.answers)
      buff.write(_struct_I.pack(length))
      for val1 in self.response.answers:
        _v3 = val1.bounding_box
        _x = _v3
        buff.write(_struct_4IB.pack(_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify))
        length = len(val1.best_species)
        buff.write(_struct_I.pack(length))
        for val2 in val1.best_species:
          _x = val2
          buff.write(_struct_If.pack(_x.species_id, _x.score))
          _x = val2.meta_data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.response is None:
        self.response = reefbot_msgs.msg.SpeciesIDResponse()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.response.header.seq, _x.response.header.stamp.secs, _x.response.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.response.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.response.image_id,) = _struct_Q.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.response.answers = []
      for i in range(0, length):
        val1 = reefbot_msgs.msg.SingleSpeciesId()
        _v4 = val1.bounding_box
        _x = _v4
        start = end
        end += 17
        (_x.x_offset, _x.y_offset, _x.height, _x.width, _x.do_rectify,) = _struct_4IB.unpack(str[start:end])
        _v4.do_rectify = bool(_v4.do_rectify)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.best_species = []
        for i in range(0, length):
          val2 = reefbot_msgs.msg.SpeciesScore()
          _x = val2
          start = end
          end += 8
          (_x.species_id, _x.score,) = _struct_If.unpack(str[start:end])
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.meta_data = str[start:end].decode('utf-8')
          else:
            val2.meta_data = str[start:end]
          val1.best_species.append(val2)
        self.response.answers.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Q = struct.Struct("<Q")
_struct_3I = struct.Struct("<3I")
_struct_4IB = struct.Struct("<4IB")
_struct_If = struct.Struct("<If")
class FindSpecies(object):
  _type          = 'reefbot_msgs/FindSpecies'
  _md5sum = '7da9366c50b21c9cef266c42d369b77c'
  _request_class  = FindSpeciesRequest
  _response_class = FindSpeciesResponse
