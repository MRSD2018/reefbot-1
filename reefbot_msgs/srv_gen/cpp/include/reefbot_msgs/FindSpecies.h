/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/reefbot_msgs/srv/FindSpecies.srv */
#ifndef REEFBOT_MSGS_SERVICE_FINDSPECIES_H
#define REEFBOT_MSGS_SERVICE_FINDSPECIES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "reefbot_msgs/ImageCaptured.h"


#include "reefbot_msgs/SpeciesIDResponse.h"

namespace reefbot_msgs
{
template <class ContainerAllocator>
struct FindSpeciesRequest_ {
  typedef FindSpeciesRequest_<ContainerAllocator> Type;

  FindSpeciesRequest_()
  : image()
  {
  }

  FindSpeciesRequest_(const ContainerAllocator& _alloc)
  : image(_alloc)
  {
  }

  typedef  ::reefbot_msgs::ImageCaptured_<ContainerAllocator>  _image_type;
   ::reefbot_msgs::ImageCaptured_<ContainerAllocator>  image;


  typedef boost::shared_ptr< ::reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reefbot_msgs::FindSpeciesRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FindSpeciesRequest
typedef  ::reefbot_msgs::FindSpeciesRequest_<std::allocator<void> > FindSpeciesRequest;

typedef boost::shared_ptr< ::reefbot_msgs::FindSpeciesRequest> FindSpeciesRequestPtr;
typedef boost::shared_ptr< ::reefbot_msgs::FindSpeciesRequest const> FindSpeciesRequestConstPtr;


template <class ContainerAllocator>
struct FindSpeciesResponse_ {
  typedef FindSpeciesResponse_<ContainerAllocator> Type;

  FindSpeciesResponse_()
  : response()
  {
  }

  FindSpeciesResponse_(const ContainerAllocator& _alloc)
  : response(_alloc)
  {
  }

  typedef  ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator>  _response_type;
   ::reefbot_msgs::SpeciesIDResponse_<ContainerAllocator>  response;


  typedef boost::shared_ptr< ::reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::reefbot_msgs::FindSpeciesResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FindSpeciesResponse
typedef  ::reefbot_msgs::FindSpeciesResponse_<std::allocator<void> > FindSpeciesResponse;

typedef boost::shared_ptr< ::reefbot_msgs::FindSpeciesResponse> FindSpeciesResponsePtr;
typedef boost::shared_ptr< ::reefbot_msgs::FindSpeciesResponse const> FindSpeciesResponseConstPtr;

struct FindSpecies
{

typedef FindSpeciesRequest Request;
typedef FindSpeciesResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct FindSpecies
} // namespace reefbot_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::FindSpeciesRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d75780091c908e247bf645a43c77f4ce";
  }

  static const char* value(const  ::reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd75780091c908e24ULL;
  static const uint64_t static_value2 = 0x7bf645a43c77f4ceULL;
};

template<class ContainerAllocator>
struct DataType< ::reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/FindSpeciesRequest";
  }

  static const char* value(const  ::reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ImageCaptured image\n\
\n\
================================================================================\n\
MSG: reefbot_msgs/ImageCaptured\n\
# This message specifies that a still image was captured by the system.\n\
#\n\
# If you're using OpenCV to handle images, look up the cv_bridge in \n\
# ROS to easily write/read this message.\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: Sept 2010\n\
\n\
Header header\n\
\n\
# Optional Id to identify the image\n\
uint64 image_id\n\
\n\
# Full color image that was captured\n\
sensor_msgs/Image image\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
";
  }

  static const char* value(const  ::reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::reefbot_msgs::FindSpeciesResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2660d795deb5b215e3a6337b079df1fa";
  }

  static const char* value(const  ::reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2660d795deb5b215ULL;
  static const uint64_t static_value2 = 0xe3a6337b079df1faULL;
};

template<class ContainerAllocator>
struct DataType< ::reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/FindSpeciesResponse";
  }

  static const char* value(const  ::reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "SpeciesIDResponse response\n\
\n\
================================================================================\n\
MSG: reefbot_msgs/SpeciesIDResponse\n\
# Response to a SpeciesIDRequest that tells the user the best guess of\n\
# what species were found.\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: June 2010\n\
\n\
Header header\n\
\n\
# Optional Id to identify the image\n\
uint64 image_id\n\
\n\
# Answers, one for each region in the Request and in the same order.\n\
SingleSpeciesId[] answers\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: reefbot_msgs/SingleSpeciesId\n\
# The best few matches for the species in a single region\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: June 2010\n\
\n\
# The bounding box where we found the individual\n\
sensor_msgs/RegionOfInterest bounding_box\n\
\n\
# The most likely species in descending order. This array could be\n\
# empty if there was no good match.\n\
SpeciesScore[] best_species\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
================================================================================\n\
MSG: reefbot_msgs/SpeciesScore\n\
# The score of a species identification. The score is dependent on the\n\
# algorithm being used so it doesn't necessarily have semantic meaning\n\
# except that a higher score is better.\n\
#\n\
# Author: Mark Desnoyer (markd@cmu.edu)\n\
# Date: June 2010\n\
\n\
# Unique identifier for the species\n\
uint32 species_id\n\
\n\
# Score for the species. Higher is better\n\
float32 score\n\
\n\
# Optional extra information about the score. This will be algorithm\n\
# dependent and might be useful for debugging\n\
string meta_data\n\
\n\
";
  }

  static const char* value(const  ::reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.image);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FindSpeciesRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.response);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FindSpeciesResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<reefbot_msgs::FindSpecies> {
  static const char* value() 
  {
    return "7da9366c50b21c9cef266c42d369b77c";
  }

  static const char* value(const reefbot_msgs::FindSpecies&) { return value(); } 
};

template<>
struct DataType<reefbot_msgs::FindSpecies> {
  static const char* value() 
  {
    return "reefbot_msgs/FindSpecies";
  }

  static const char* value(const reefbot_msgs::FindSpecies&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7da9366c50b21c9cef266c42d369b77c";
  }

  static const char* value(const reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/FindSpecies";
  }

  static const char* value(const reefbot_msgs::FindSpeciesRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "7da9366c50b21c9cef266c42d369b77c";
  }

  static const char* value(const reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "reefbot_msgs/FindSpecies";
  }

  static const char* value(const reefbot_msgs::FindSpeciesResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // REEFBOT_MSGS_SERVICE_FINDSPECIES_H

