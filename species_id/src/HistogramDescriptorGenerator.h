// Class that can generate a histogram of some other image descriptor
// given a dictionary. The histogram is generated by doing an
// approximate nearest neighbour classification to a set of dictionary
// entries.
//
// This template class is parameterized by the
// ImageDescriptorGenerator needed to extract that raw descriptors
// that need to be bucketed for a histogram.
//
// Author: Mark Desnoyer
// Date: Sept 2010

#ifndef _SPECIES_ID_HISTOGRAM_DESCRIPTOR_GENERATOR_H_
#define _SPECIES_ID_HISTOGRAM_DESCRIPTOR_GENERATOR_H_

#include <boost/scoped_array.hpp>
#include <boost/scoped_ptr.hpp>
#include <vector>
#include <iostream>
#include "opencv2/features2d/features2d.hpp"

#include "HistogramImageDescriptor.h"
#include "ImageDescriptorGenerator.h"
#include "base/StringPiece.h"
#include "flann/flann.hpp"
#include "cv_utils/IntegralHistogram.h"

namespace species_id {

template <typename T> class NNCache;

template <typename T>
class HistogramDescriptorGenerator : public ImageDescriptorGenerator<float> {
  
public:
  typedef HistogramImageDescriptor::Ptr HistDescriptorPtr;
  typedef std::vector<HistDescriptorPtr> HistDescriptorCollection;

  // Creates a HistogramDescriptorGenerator based on the dictionary
  // found in the file specified by filename.
  //
  // The dictionary must be in the format used by
  // the INRIA Feature extrator by Krystian.Mikolajczyk@inrialpes.fr.
  //
  // The format is:
  // 
  // vector_dimension
  // number_of_buckets
  // desc_1 desc_2 ......desc_vector_dimension
  //
  // Inputs:
  // rawGenerator - The generator that's used to create the raw image 
  //   descriptors, which are then turned into histograms.
  // filename - Filename of the text file containing the dictionary
  // targetPrecision - A number between 0 and 1 specifying the
  //   percentage of the approximate nearest-neighbor searches that
  //   return the exact nearest neighbor. Using a higher value for this
  //   parameter gives more accurate results, but the searching takes
  //   longer.
  // buildWeight - specifies the importance of the index build time
  //   reported to the nearest-neighbor search time. In some
  //   applications it's acceptable for the index build step to take a
  //   long time if the subsequent searches in the index can be
  //   performed very fast. In other applications it's required that the
  //   index be build as fast as possible even if that leads to slightly
  //   longer search times.
  // memoryWeight - is used to specify the tradeoff between time
  //   (index build time and search time) and memory used by the
  //   index. A value less than 1 gives more importance to the time
  //   spent and a value greater than 1 gives more importance to the
  //   memory usage.
  // trackCoords - Should the coordinates of the entries in the histogram
  //               bin be tracked?
  //
  // Returns: Pointer to a new object. Caller must take ownership.
  static HistogramDescriptorGenerator<T>* CreateFromINRIADictionary(
    ImageDescriptorGenerator<T>* rawGenerator,
    const StringPiece& filename,
    float targetPrecision=0.9,
    float buildWeight=1e-3,
    float memoryWeight=0.5,
    bool trackCoords=true);

  static HistogramDescriptorGenerator<T>* CreateFromINRIADictionary(
    ImageDescriptorGenerator<T>* rawGenerator,
    std::istream& stream,
    float targetPrecision=0.9,
    float buildWeight=1e-3,
    float memoryWeight=0.5,
    bool trackCoords=true);

  static HistogramDescriptorGenerator<T>* CreateFromINRIADictionary(
    ImageDescriptorGenerator<T>* rawGenerator,
    std::istream& stream,
    const flann::IndexParams& indexParams,
    int checks = 32,
    bool trackCoords=true);

  static HistogramDescriptorGenerator<T>* CreateFromINRIADictionary(
    ImageDescriptorGenerator<T>* rawGenerator,
    const StringPiece& filename,
    const flann::IndexParams& indexParams,
    int checks = 32,
    bool trackCoords=true);

  virtual ~HistogramDescriptorGenerator();

  // Extracts a set of descriptors from an image for each mask region
  // that is defined.
  //
  // Inputs:
  // image - The image to extract the descriptors from
  // masks - Set of ImageRegions that define the masks to look for
  //         descriptors. If no masks are in the collection, uses
  //         the whole image.
  // 
  // Outputs:
  // descriptors - Set of descriptor collections, one for each mask
  //               that specifies the descriptors present in that mask.
  virtual void ExtractUsingMasks(
    const cv::Mat& image,
    const MaskCollection& masks,
    std::vector<boost::shared_ptr<DescriptorCollection> >* descriptors) const{
    ExtractUsingMasksImpl(image, masks, descriptors);
  }

  void ExtractUsingMasks(
    const cv::Mat& image,
    const MaskCollection& masks,
    std::vector<boost::shared_ptr<HistDescriptorCollection> >* descriptors) const {
    ExtractUsingMasksImpl(image, masks, descriptors);
  }

  // Instead of using a collection of masks for a given image, we can
  // call each mask independently. InitializeForWholeImage must be
  // called first
  //
  // Inputs:
  // image - The image to extract the descriptors from
  // mask - Mask to get the descriptor of
  //
  // Outputs:
  // The collection of descriptors found in that mask.
  virtual void ExtractFromSingleMask(
    const cv::Mat& image,
    const reefbot_msgs::ImageRegion& mask,
    DescriptorCollection* collection) const;
  HistDescriptorPtr ExtractHistogramFromSingleMask(
    const cv::Mat& image,
    const reefbot_msgs::ImageRegion& mask) const;

  // Initializes the entire image so that calls to ExtractFromSingleMask
  // can execute efficiently.
  // 
  // Inputs:
  // image - Image to initialize for.
  // mask - Optional boolean mask that specifies locations in the
  // image where it is valid to have a descriptors. N.B. If this is
  // used, it is the user's responsibility to make sure that only the
  // regions specified will be requested. No error will be reported if
  // you use it wrong.
  virtual void InitializeForWholeImage(
    const cv::Mat& image, const cv::Mat_<uint8>& mask=cv::Mat_<uint8>());

private:
  // Generator to create the raw image descriptors
  ImageDescriptorGenerator<T>* rawGenerator_; 

  boost::scoped_ptr<flann::Index<T> > index_; // Nearest neighbour index
  uint64_t dictSize_; // Number of entries in the dictionary
  boost::scoped_array<T> dictBuf_; // Buffer for the data in the dictionary.
  int checks_; // Number of times to traverse the index

  bool trackCoords_; // Should coordinates of all the values be tracked?

  mutable boost::scoped_ptr<NNCache<T> > nnCache_;

  HistogramDescriptorGenerator(ImageDescriptorGenerator<T>*
                               rawGenerator)
    : rawGenerator_(rawGenerator), index_(NULL) {}

  virtual void ExtractFromWholeImage(
    const cv::Mat& image,
    const std::vector<cv::KeyPoint>& keypoints,
    DescriptorCollection* descriptors) const;

  template <typename DescriptorT>
  void ExtractUsingMasksImpl(
    const cv::Mat& image,
    const MaskCollection& masks,
    std::vector<boost::shared_ptr<DescriptorT> >* descriptors) const;


};

} // namespace

#endif // _SPECIES_ID_HISTOGRAM_DESCRIPTOR_GENERATOR_H_
