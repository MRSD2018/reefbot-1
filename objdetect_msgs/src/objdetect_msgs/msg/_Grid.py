"""autogenerated by genpy from objdetect_msgs/Grid.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Grid(genpy.Message):
  _md5sum = "c1403dfd7e97db95b316a1cacfcaecf8"
  _type = "objdetect_msgs/Grid"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Specifies a  w,h,x,y dense grid
# The starting points for the location search
uint32 minX
uint32 minY

# The strides in the location space
uint32 strideX
uint32 strideY

# The starting points for the scaling
uint32 minW
uint32 minH

# The strides in the w, h space. In this case, we step by growing by a
# fraction, so that width_i is round(minWidth*strideW^i)
float64 strideW
float64 strideH

# True if the width and height should be a consistent aspect ratio that are 
# defined by minW and minH. This reduces the grid to (s,x,y)
bool fixAspect
"""
  __slots__ = ['minX','minY','strideX','strideY','minW','minH','strideW','strideH','fixAspect']
  _slot_types = ['uint32','uint32','uint32','uint32','uint32','uint32','float64','float64','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       minX,minY,strideX,strideY,minW,minH,strideW,strideH,fixAspect

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Grid, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.minX is None:
        self.minX = 0
      if self.minY is None:
        self.minY = 0
      if self.strideX is None:
        self.strideX = 0
      if self.strideY is None:
        self.strideY = 0
      if self.minW is None:
        self.minW = 0
      if self.minH is None:
        self.minH = 0
      if self.strideW is None:
        self.strideW = 0.
      if self.strideH is None:
        self.strideH = 0.
      if self.fixAspect is None:
        self.fixAspect = False
    else:
      self.minX = 0
      self.minY = 0
      self.strideX = 0
      self.strideY = 0
      self.minW = 0
      self.minH = 0
      self.strideW = 0.
      self.strideH = 0.
      self.fixAspect = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6I2dB.pack(_x.minX, _x.minY, _x.strideX, _x.strideY, _x.minW, _x.minH, _x.strideW, _x.strideH, _x.fixAspect))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.minX, _x.minY, _x.strideX, _x.strideY, _x.minW, _x.minH, _x.strideW, _x.strideH, _x.fixAspect,) = _struct_6I2dB.unpack(str[start:end])
      self.fixAspect = bool(self.fixAspect)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6I2dB.pack(_x.minX, _x.minY, _x.strideX, _x.strideY, _x.minW, _x.minH, _x.strideW, _x.strideH, _x.fixAspect))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 41
      (_x.minX, _x.minY, _x.strideX, _x.strideY, _x.minW, _x.minH, _x.strideW, _x.strideH, _x.fixAspect,) = _struct_6I2dB.unpack(str[start:end])
      self.fixAspect = bool(self.fixAspect)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6I2dB = struct.Struct("<6I2dB")
