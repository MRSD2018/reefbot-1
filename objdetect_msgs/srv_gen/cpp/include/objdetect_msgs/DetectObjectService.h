/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/objdetect_msgs/srv/DetectObjectService.srv */
#ifndef OBJDETECT_MSGS_SERVICE_DETECTOBJECTSERVICE_H
#define OBJDETECT_MSGS_SERVICE_DETECTOBJECTSERVICE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "objdetect_msgs/DetectObject.h"


#include "objdetect_msgs/DetectionArray.h"
#include "std_msgs/Duration.h"

namespace objdetect_msgs
{
template <class ContainerAllocator>
struct DetectObjectServiceRequest_ {
  typedef DetectObjectServiceRequest_<ContainerAllocator> Type;

  DetectObjectServiceRequest_()
  : request_msg()
  {
  }

  DetectObjectServiceRequest_(const ContainerAllocator& _alloc)
  : request_msg(_alloc)
  {
  }

  typedef  ::objdetect_msgs::DetectObject_<ContainerAllocator>  _request_msg_type;
   ::objdetect_msgs::DetectObject_<ContainerAllocator>  request_msg;


  typedef boost::shared_ptr< ::objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DetectObjectServiceRequest
typedef  ::objdetect_msgs::DetectObjectServiceRequest_<std::allocator<void> > DetectObjectServiceRequest;

typedef boost::shared_ptr< ::objdetect_msgs::DetectObjectServiceRequest> DetectObjectServiceRequestPtr;
typedef boost::shared_ptr< ::objdetect_msgs::DetectObjectServiceRequest const> DetectObjectServiceRequestConstPtr;


template <class ContainerAllocator>
struct DetectObjectServiceResponse_ {
  typedef DetectObjectServiceResponse_<ContainerAllocator> Type;

  DetectObjectServiceResponse_()
  : detections()
  , processing_time()
  {
  }

  DetectObjectServiceResponse_(const ContainerAllocator& _alloc)
  : detections(_alloc)
  , processing_time(_alloc)
  {
  }

  typedef  ::objdetect_msgs::DetectionArray_<ContainerAllocator>  _detections_type;
   ::objdetect_msgs::DetectionArray_<ContainerAllocator>  detections;

  typedef  ::std_msgs::Duration_<ContainerAllocator>  _processing_time_type;
   ::std_msgs::Duration_<ContainerAllocator>  processing_time;


  typedef boost::shared_ptr< ::objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DetectObjectServiceResponse
typedef  ::objdetect_msgs::DetectObjectServiceResponse_<std::allocator<void> > DetectObjectServiceResponse;

typedef boost::shared_ptr< ::objdetect_msgs::DetectObjectServiceResponse> DetectObjectServiceResponsePtr;
typedef boost::shared_ptr< ::objdetect_msgs::DetectObjectServiceResponse const> DetectObjectServiceResponseConstPtr;

struct DetectObjectService
{

typedef DetectObjectServiceRequest Request;
typedef DetectObjectServiceResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct DetectObjectService
} // namespace objdetect_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "bb795819ba0a008052b5ac395920fa6b";
  }

  static const char* value(const  ::objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xbb795819ba0a0080ULL;
  static const uint64_t static_value2 = 0x52b5ac395920fa6bULL;
};

template<class ContainerAllocator>
struct DataType< ::objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objdetect_msgs/DetectObjectServiceRequest";
  }

  static const char* value(const  ::objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "DetectObject request_msg\n\
\n\
================================================================================\n\
MSG: objdetect_msgs/DetectObject\n\
Header header\n\
\n\
# The image to find objects in\n\
sensor_msgs/Image image\n\
\n\
# Regions of interest to look for the object. If it is empty, search\n\
# through the entire image\n\
sensor_msgs/RegionOfInterest[] regions\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
";
  }

  static const char* value(const  ::objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "5b9953b519f7a3bddfa8ca0cd09647ca";
  }

  static const char* value(const  ::objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x5b9953b519f7a3bdULL;
  static const uint64_t static_value2 = 0xdfa8ca0cd09647caULL;
};

template<class ContainerAllocator>
struct DataType< ::objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objdetect_msgs/DetectObjectServiceResponse";
  }

  static const char* value(const  ::objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "DetectionArray detections\n\
std_msgs/Duration processing_time\n\
\n\
================================================================================\n\
MSG: objdetect_msgs/DetectionArray\n\
Header header\n\
Detection[] detections\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: objdetect_msgs/Detection\n\
# A single detection from the object detector\n\
Header header\n\
\n\
# Optional label for the detection\n\
string label\n\
\n\
# Name of the detector used\n\
string detector\n\
\n\
# Quality of the detection\n\
float32 score\n\
\n\
# Mask specifying the location of the detection\n\
Mask mask\n\
================================================================================\n\
MSG: objdetect_msgs/Mask\n\
# this message is used to mark where an object is present in an image\n\
# this can be done either by a roi region on the image (less precise)\n\
# or a mask (more precise)\n\
\n\
sensor_msgs/RegionOfInterest roi\n\
\n\
# in the case when mask is used, 'roi' specifies the image region and 'mask'\n\
# (which should be of the same size) a binary mask in that region\n\
sensor_msgs/Image mask\n\
================================================================================\n\
MSG: sensor_msgs/RegionOfInterest\n\
# This message is used to specify a region of interest within an image.\n\
#\n\
# When used to specify the ROI setting of the camera when the image was\n\
# taken, the height and width fields should either match the height and\n\
# width fields for the associated image; or height = width = 0\n\
# indicates that the full resolution image was captured.\n\
\n\
uint32 x_offset  # Leftmost pixel of the ROI\n\
                 # (0 if the ROI includes the left edge of the image)\n\
uint32 y_offset  # Topmost pixel of the ROI\n\
                 # (0 if the ROI includes the top edge of the image)\n\
uint32 height    # Height of ROI\n\
uint32 width     # Width of ROI\n\
\n\
# True if a distinct rectified ROI should be calculated from the \"raw\"\n\
# ROI in this message. Typically this should be False if the full image\n\
# is captured (ROI not used), and True if a subwindow is captured (ROI\n\
# used).\n\
bool do_rectify\n\
\n\
================================================================================\n\
MSG: sensor_msgs/Image\n\
# This message contains an uncompressed image\n\
# (0, 0) is at top-left corner of image\n\
#\n\
\n\
Header header        # Header timestamp should be acquisition time of image\n\
                     # Header frame_id should be optical frame of camera\n\
                     # origin of frame should be optical center of cameara\n\
                     # +x should point to the right in the image\n\
                     # +y should point down in the image\n\
                     # +z should point into to plane of the image\n\
                     # If the frame_id here and the frame_id of the CameraInfo\n\
                     # message associated with the image conflict\n\
                     # the behavior is undefined\n\
\n\
uint32 height         # image height, that is, number of rows\n\
uint32 width          # image width, that is, number of columns\n\
\n\
# The legal values for encoding are in file src/image_encodings.cpp\n\
# If you want to standardize a new string format, join\n\
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.\n\
\n\
string encoding       # Encoding of pixels -- channel meaning, ordering, size\n\
                      # taken from the list of strings in src/image_encodings.cpp\n\
\n\
uint8 is_bigendian    # is this data bigendian?\n\
uint32 step           # Full row length in bytes\n\
uint8[] data          # actual matrix data, size is (step * rows)\n\
\n\
================================================================================\n\
MSG: std_msgs/Duration\n\
duration data\n\
\n\
";
  }

  static const char* value(const  ::objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.request_msg);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DetectObjectServiceRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.detections);
    stream.next(m.processing_time);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DetectObjectServiceResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<objdetect_msgs::DetectObjectService> {
  static const char* value() 
  {
    return "1ed709a3e7114464833850e26e7d3057";
  }

  static const char* value(const objdetect_msgs::DetectObjectService&) { return value(); } 
};

template<>
struct DataType<objdetect_msgs::DetectObjectService> {
  static const char* value() 
  {
    return "objdetect_msgs/DetectObjectService";
  }

  static const char* value(const objdetect_msgs::DetectObjectService&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1ed709a3e7114464833850e26e7d3057";
  }

  static const char* value(const objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objdetect_msgs/DetectObjectService";
  }

  static const char* value(const objdetect_msgs::DetectObjectServiceRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "1ed709a3e7114464833850e26e7d3057";
  }

  static const char* value(const objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objdetect_msgs/DetectObjectService";
  }

  static const char* value(const objdetect_msgs::DetectObjectServiceResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // OBJDETECT_MSGS_SERVICE_DETECTOBJECTSERVICE_H

