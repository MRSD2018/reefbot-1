/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/objdetect_msgs/msg/Grid.msg */
#ifndef OBJDETECT_MSGS_MESSAGE_GRID_H
#define OBJDETECT_MSGS_MESSAGE_GRID_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace objdetect_msgs
{
template <class ContainerAllocator>
struct Grid_ {
  typedef Grid_<ContainerAllocator> Type;

  Grid_()
  : minX(0)
  , minY(0)
  , strideX(0)
  , strideY(0)
  , minW(0)
  , minH(0)
  , strideW(0.0)
  , strideH(0.0)
  , fixAspect(false)
  {
  }

  Grid_(const ContainerAllocator& _alloc)
  : minX(0)
  , minY(0)
  , strideX(0)
  , strideY(0)
  , minW(0)
  , minH(0)
  , strideW(0.0)
  , strideH(0.0)
  , fixAspect(false)
  {
  }

  typedef uint32_t _minX_type;
  uint32_t minX;

  typedef uint32_t _minY_type;
  uint32_t minY;

  typedef uint32_t _strideX_type;
  uint32_t strideX;

  typedef uint32_t _strideY_type;
  uint32_t strideY;

  typedef uint32_t _minW_type;
  uint32_t minW;

  typedef uint32_t _minH_type;
  uint32_t minH;

  typedef double _strideW_type;
  double strideW;

  typedef double _strideH_type;
  double strideH;

  typedef uint8_t _fixAspect_type;
  uint8_t fixAspect;


  typedef boost::shared_ptr< ::objdetect_msgs::Grid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objdetect_msgs::Grid_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct Grid
typedef  ::objdetect_msgs::Grid_<std::allocator<void> > Grid;

typedef boost::shared_ptr< ::objdetect_msgs::Grid> GridPtr;
typedef boost::shared_ptr< ::objdetect_msgs::Grid const> GridConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::objdetect_msgs::Grid_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::objdetect_msgs::Grid_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace objdetect_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objdetect_msgs::Grid_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objdetect_msgs::Grid_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objdetect_msgs::Grid_<ContainerAllocator> > {
  static const char* value() 
  {
    return "c1403dfd7e97db95b316a1cacfcaecf8";
  }

  static const char* value(const  ::objdetect_msgs::Grid_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xc1403dfd7e97db95ULL;
  static const uint64_t static_value2 = 0xb316a1cacfcaecf8ULL;
};

template<class ContainerAllocator>
struct DataType< ::objdetect_msgs::Grid_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objdetect_msgs/Grid";
  }

  static const char* value(const  ::objdetect_msgs::Grid_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objdetect_msgs::Grid_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Specifies a  w,h,x,y dense grid\n\
# The starting points for the location search\n\
uint32 minX\n\
uint32 minY\n\
\n\
# The strides in the location space\n\
uint32 strideX\n\
uint32 strideY\n\
\n\
# The starting points for the scaling\n\
uint32 minW\n\
uint32 minH\n\
\n\
# The strides in the w, h space. In this case, we step by growing by a\n\
# fraction, so that width_i is round(minWidth*strideW^i)\n\
float64 strideW\n\
float64 strideH\n\
\n\
# True if the width and height should be a consistent aspect ratio that are \n\
# defined by minW and minH. This reduces the grid to (s,x,y)\n\
bool fixAspect\n\
";
  }

  static const char* value(const  ::objdetect_msgs::Grid_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::objdetect_msgs::Grid_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objdetect_msgs::Grid_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.minX);
    stream.next(m.minY);
    stream.next(m.strideX);
    stream.next(m.strideY);
    stream.next(m.minW);
    stream.next(m.minH);
    stream.next(m.strideW);
    stream.next(m.strideH);
    stream.next(m.fixAspect);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct Grid_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::objdetect_msgs::Grid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::objdetect_msgs::Grid_<ContainerAllocator> & v) 
  {
    s << indent << "minX: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.minX);
    s << indent << "minY: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.minY);
    s << indent << "strideX: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.strideX);
    s << indent << "strideY: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.strideY);
    s << indent << "minW: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.minW);
    s << indent << "minH: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.minH);
    s << indent << "strideW: ";
    Printer<double>::stream(s, indent + "  ", v.strideW);
    s << indent << "strideH: ";
    Printer<double>::stream(s, indent + "  ", v.strideH);
    s << indent << "fixAspect: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fixAspect);
  }
};


} // namespace message_operations
} // namespace ros

#endif // OBJDETECT_MSGS_MESSAGE_GRID_H

