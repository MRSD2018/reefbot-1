/* Auto-generated by genmsg_cpp for file /home/mdesnoyer/src/reefbot/ros/objdetect_msgs/msg/DetectGridScores.msg */
#ifndef OBJDETECT_MSGS_MESSAGE_DETECTGRIDSCORES_H
#define OBJDETECT_MSGS_MESSAGE_DETECTGRIDSCORES_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "objdetect_msgs/Grid.h"
#include "sensor_msgs/MatND.h"
#include "sensor_msgs/MatND.h"
#include "std_msgs/Duration.h"

namespace objdetect_msgs
{
template <class ContainerAllocator>
struct DetectGridScores_ {
  typedef DetectGridScores_<ContainerAllocator> Type;

  DetectGridScores_()
  : header()
  , grid()
  , scores()
  , mask()
  , processing_time()
  {
  }

  DetectGridScores_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , grid(_alloc)
  , scores(_alloc)
  , mask(_alloc)
  , processing_time(_alloc)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef  ::objdetect_msgs::Grid_<ContainerAllocator>  _grid_type;
   ::objdetect_msgs::Grid_<ContainerAllocator>  grid;

  typedef  ::sensor_msgs::MatND_<ContainerAllocator>  _scores_type;
   ::sensor_msgs::MatND_<ContainerAllocator>  scores;

  typedef  ::sensor_msgs::MatND_<ContainerAllocator>  _mask_type;
   ::sensor_msgs::MatND_<ContainerAllocator>  mask;

  typedef  ::std_msgs::Duration_<ContainerAllocator>  _processing_time_type;
   ::std_msgs::Duration_<ContainerAllocator>  processing_time;


  typedef boost::shared_ptr< ::objdetect_msgs::DetectGridScores_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::objdetect_msgs::DetectGridScores_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct DetectGridScores
typedef  ::objdetect_msgs::DetectGridScores_<std::allocator<void> > DetectGridScores;

typedef boost::shared_ptr< ::objdetect_msgs::DetectGridScores> DetectGridScoresPtr;
typedef boost::shared_ptr< ::objdetect_msgs::DetectGridScores const> DetectGridScoresConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::objdetect_msgs::DetectGridScores_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::objdetect_msgs::DetectGridScores_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace objdetect_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::objdetect_msgs::DetectGridScores_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::objdetect_msgs::DetectGridScores_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::objdetect_msgs::DetectGridScores_<ContainerAllocator> > {
  static const char* value() 
  {
    return "177d931fe6488b6b75f16e4d7b7caf56";
  }

  static const char* value(const  ::objdetect_msgs::DetectGridScores_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x177d931fe6488b6bULL;
  static const uint64_t static_value2 = 0x75f16e4d7b7caf56ULL;
};

template<class ContainerAllocator>
struct DataType< ::objdetect_msgs::DetectGridScores_<ContainerAllocator> > {
  static const char* value() 
  {
    return "objdetect_msgs/DetectGridScores";
  }

  static const char* value(const  ::objdetect_msgs::DetectGridScores_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::objdetect_msgs::DetectGridScores_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Specifies socres on a detection grid that runs (x,y,w,h). If the aspect ratio is fixed, this will change to (x,y,s)\n\
\n\
Header header\n\
\n\
# The (w,h,x,y) grid that has a response\n\
Grid grid\n\
\n\
# A grid of scores across the space that are based on an evaluation\n\
# for each box.\n\
sensor_msgs/MatND scores\n\
\n\
# An optional binary mask that is 4 dimensional (w,h,x,y) and\n\
# specifies which entries have valid values\n\
sensor_msgs/MatND mask\n\
\n\
# The processing time to calculate the detection\n\
std_msgs/Duration processing_time\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: objdetect_msgs/Grid\n\
# Specifies a  w,h,x,y dense grid\n\
# The starting points for the location search\n\
uint32 minX\n\
uint32 minY\n\
\n\
# The strides in the location space\n\
uint32 strideX\n\
uint32 strideY\n\
\n\
# The starting points for the scaling\n\
uint32 minW\n\
uint32 minH\n\
\n\
# The strides in the w, h space. In this case, we step by growing by a\n\
# fraction, so that width_i is round(minWidth*strideW^i)\n\
float64 strideW\n\
float64 strideH\n\
\n\
# True if the width and height should be a consistent aspect ratio that are \n\
# defined by minW and minH. This reduces the grid to (s,x,y)\n\
bool fixAspect\n\
================================================================================\n\
MSG: sensor_msgs/MatND\n\
# A message that contains an uncompressed n dimensional\n\
# matrix. Designed to be compatible with the opencv n-dimensional\n\
# matrix.\n\
Header header\n\
\n\
int32[] sizes # The size of each dimension in the matrix\n\
\n\
string encoding # The data type see src/image_encodings.cpp\n\
\n\
bool is_bigendian # Is the data bigendian?\n\
\n\
uint8[] data # The actual data\n\
\n\
================================================================================\n\
MSG: std_msgs/Duration\n\
duration data\n\
\n\
";
  }

  static const char* value(const  ::objdetect_msgs::DetectGridScores_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::objdetect_msgs::DetectGridScores_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::objdetect_msgs::DetectGridScores_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::objdetect_msgs::DetectGridScores_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.grid);
    stream.next(m.scores);
    stream.next(m.mask);
    stream.next(m.processing_time);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct DetectGridScores_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::objdetect_msgs::DetectGridScores_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::objdetect_msgs::DetectGridScores_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "grid: ";
s << std::endl;
    Printer< ::objdetect_msgs::Grid_<ContainerAllocator> >::stream(s, indent + "  ", v.grid);
    s << indent << "scores: ";
s << std::endl;
    Printer< ::sensor_msgs::MatND_<ContainerAllocator> >::stream(s, indent + "  ", v.scores);
    s << indent << "mask: ";
s << std::endl;
    Printer< ::sensor_msgs::MatND_<ContainerAllocator> >::stream(s, indent + "  ", v.mask);
    s << indent << "processing_time: ";
s << std::endl;
    Printer< ::std_msgs::Duration_<ContainerAllocator> >::stream(s, indent + "  ", v.processing_time);
  }
};


} // namespace message_operations
} // namespace ros

#endif // OBJDETECT_MSGS_MESSAGE_DETECTGRIDSCORES_H

